puts - put string. gets string version of everything
.to_s - convert to string
.to_i - convert to integer
.to_f - convert to float
gets - get string. gets string input from keyboard
.chomp - elminiates Enter characters from strings e.g. gets.chomp
.reverse - returns reverse of string
.length - returns lenght of string e.g. name.length.to_s
.upcase - changes string to uppercase
.downcase - changes string to lowercase
.swapcase - switches case
.capitalize - capitalizes first character
.center - center aligns output e.g. "old mother".center(line width)
.ljust - left justifies
.rjust - right justifies
** - exponential
% - modulus. gives remainder
    You can calculate x%y as follows: First you calculate x/y (cutting off
    everything after the decimal point). Then you take this number and
    substract it from x.
    For example: 421/100==4  4*100==400 421%100==421-400==21
    If y>x then x/y==0, so x%y==x.
    2%1000 = 2
.abs - gives absolute value
rand - random number generator.
\ - escape character
" " - allows interpolations
# - comment
|| - or character. e.g. if name = "Chris" || name = "Kathy"
&& - and
! - not
recursion - not a command. Is a method calling itself.
each - an iterator. allows you to do something to each object an array points to 
	e.g. languages = ["English", "Norwegian", "Ruby"]
		 languages.each do |lang|
		 	puts "I love #{lang}!"
		 	puts "Don't you?"
		 end
.times - an iterator. does something a specified number of time.
	e.g. 3.times do
		 	puts "Hip-Hip-Hooray!"
		 end
.join - calls .to_s on indiviual elements of array and adds the string you provide in between those.
.push - adds an object to the end of your array.
<< - same as push
.pop - removes the last object from the array
.last - tells you what's at the end of the array, but doesn't modify array.
%q - quote delimeter. e.g. sarcasm_quote = %q{ Brad said, "I really 'like' creating change orders."}
.each_with_index - e.g. chapternums.each_with_index do | chapter, x |
? - returns boolean value
.downto() - loop. counts down to specified value
.upto() - loop. counts up to a specified value
local variables - live inside methods and cannot leave.
method returns last expression evaluated unless return is explicitly called
returns - explicitly tells method what to return
